Bootstrap: docker
From: ubuntu:22.04

%help
    This def file will create a singularity file (.sif) to run vcf2maf in Niagara cluster

# run once when you build (apptainer build).
# Everything done here will be baked into the apptainer.
# So large file like the reference genome should not be included here.
# Instead large files should be downloaded at runtime and stored in the mounted directory.
# We will install miniconda here.
%post
    # Install dependencies
    apt-get update && apt-get install -y curl bzip2 tar perl rsync build-essential gzip samtools tabix

    # Install Miniconda
    curl -sL https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh
    bash miniconda.sh -bup /opt/miniconda3 && rm -f miniconda.sh

    # Initialize conda
    . /opt/miniconda3/etc/profile.d/conda.sh
    # Accept terms of service
    conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main
    conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/r

    # Update conda and install required packages
    conda update -y -n base -c defaults conda
    conda config --set solver libmamba
    
    # Create and activate vep environment
    conda create -y -n vep
    conda activate vep

    # Install VEP and dependencies
    conda install -y -c conda-forge -c bioconda -c defaults ensembl-vep==112.0 htslib==1.20 bcftools==1.20 samtools==1.20 ucsc-liftover==447
    # Install List::MoreUtils inside vep environment
    conda install -y -c bioconda perl-list-moreutils


    # Initialize conda for bash
    conda init bash

    # now we download the latest vcf2maf release
    export VCF2MAF_URL=$(curl -sL https://api.github.com/repos/mskcc/vcf2maf/releases | grep -m1 tarball_url | cut -d\" -f4)

    # Create a folder for vcf2maf
    mkdir -p "/opt/vcf2maf"

    # Download and extract into /opt/vcf2maf
    curl -L -o "/opt/vcf2maf/vcf2maf.tar.gz" "$VCF2MAF_URL"
    tar -zxf "/opt/vcf2maf/vcf2maf.tar.gz" -C "/opt/vcf2maf" --strip-components=1

    # (Optional) Check manuals or other info
    perl "/opt/vcf2maf/vcf2maf.pl" --man > /dev/null
    perl "/opt/vcf2maf/maf2maf.pl" --man > /dev/null

%environment
    # This is the environment that will be set when the container runs.
    # It should contain all the necessary environment variables for vcf2maf to work.
    export PATH="/opt/miniconda3/bin:$PATH"
    export PATH="/opt/vcf2maf:$PATH"


# run when the container runs (apptainer run)
%runscript

    # first lets check if reference file exist

    # in this case the bind will be --bind $SCRATCH/:/mount/
    mkdir -p /mount/vep_reference/homo_sapiens/112_GRCh38
    REF_DIR_38="/mount/vep_reference/homo_sapiens/112_GRCh38"
    INFOTXT_38="$REF_DIR_38/info.txt"
    download_bool=false
    echo "Checking for reference genome files in $REF_DIR_38"
    # ls "$REF_DIR_38"

    if [ -f "$INFOTXT_38" ]; then
        echo "Reference info file found."
        if grep -q "GRCh38" "$INFOTXT_38"; then
            echo "Reference genome GRCh38 found skipping download step."
        else
            echo "Reference genome GRCh38 not found."
            download_bool=true
        fi
    else
        echo "Reference genome GRCh38 not found."
        download_bool=true
    fi

    if [ "$download_bool" = true ]; then
        echo "Downloading reference genome GRCh38..."
        # Command to download the reference genome
        rsync -avr --progress rsync://ftp.ensembl.org/ensembl/pub/release-112/variation/indexed_vep_cache/homo_sapiens_vep_112_GRCh38.tar.gz /mount/vep_reference/
        tar -zxf /mount/vep_reference/homo_sapiens_vep_112_GRCh38.tar.gz -C /mount/vep_reference/
        rsync -avr --progress rsync://ftp.ensembl.org/ensembl/pub/release-112/fasta/homo_sapiens/dna_index/ /mount/vep_reference/
    fi

    # Now for GRCh37
    mkdir -p /mount/vep_reference/homo_sapiens/112_GRCh37
    REF_DIR_37="/mount/vep_reference/homo_sapiens/112_GRCh37"
    INFOTXT_37="$REF_DIR_37/info.txt"
    download_bool=false
    echo "Checking for reference genome GRCh37 files in $REF_DIR_37"
    # ls "$REF_DIR_37"

    if [ -f "$INFOTXT_37" ]; then
        echo "Reference info file found."
        if grep -q "GRCh37" "$INFOTXT_37"; then
            echo "Reference genome GRCh37 found skipping download step."
        else
            echo "Reference genome GRCh37 not found."
            download_bool=true
        fi
    else
        echo "Reference genome GRCh37 not found."
        download_bool=true
    fi

    if [ "$download_bool" = true ]; then
        echo "Downloading reference genome GRCh37..."
        # Command to download the reference genome
        rsync -avr --progress rsync://ftp.ensembl.org/ensembl/pub/release-112/variation/indexed_vep_cache/homo_sapiens_vep_112_GRCh37.tar.gz /mount/vep_reference/
        tar -zxf /mount/vep_reference/homo_sapiens_vep_112_GRCh37.tar.gz -C /mount/vep_reference/
        rsync -avr --progress rsync://ftp.ensembl.org/ensembl/pub/grch37/release-112/fasta/homo_sapiens/dna/Homo_sapiens.GRCh37.dna.toplevel.fa.gz /mount/vep_reference/homo_sapiens/112_GRCh37/
        gzip -d /mount/vep_reference/homo_sapiens/112_GRCh37/Homo_sapiens.GRCh37.dna.toplevel.fa.gz
        bgzip -i /mount/vep_reference/homo_sapiens/112_GRCh37/Homo_sapiens.GRCh37.dna.toplevel.fa
        samtools faidx /mount/vep_reference/homo_sapiens/112_GRCh37/Homo_sapiens.GRCh37.dna.toplevel.fa.gz
    fi

    # activate vep again
    . /opt/miniconda3/etc/profile.d/conda.sh
    conda activate vep
    
    # If intermediate file already exist delete them first. Intermediate file is in input file directory.
    # name of intermediate is input_name.vep.vcf.
    INT_DIRNAME="$(dirname "$1")"
    INT_VCF="$INT_DIRNAME/$(basename "$1" .vcf).vep.vcf"
    rm -f "$INT_VCF"

    sample_name=$(awk -F'\t' '/^#CHROM/ {print $10}' "$1")
    echo "Sample name is: $sample_name"

    perl /opt/vcf2maf/vcf2maf.pl \
    --input-vcf "$1" \
    --output-maf "$2" \
    --ref-fasta "$REF_DIR_37/Homo_sapiens.GRCh37.dna.toplevel.fa.gz" \
    --vep-path "$(dirname "$(which vep)")" \
    --vep-data "/mount/vep_reference" \
    --ncbi-build GRCh37 \
    --tumor-id "$sample_name" \
    --normal-id NORMAL

    # Note that if intermediate vep output files already exist, they will be overwritten.